#!/bin/sh

# Main purpose of this script
# 1. rapid response
# 2. show status, channel, statistics
#
# wlan takes too much time
# Should exactly follow wlan!

export PATH="/bin:/sbin:/usr/bin:/usr/sbin"

show_usage()
{
	cat <<EOF
	Usage: dni_wlan <command> [<arguments>]

	Commands:
	radio <11g/11a> <arguments>      : actions related to radio
	--status                    :: show radio status (ON or OFF)
	--channel                   :: show current channel
	statistic                        :: show statistic info
    stainfo                          :: show associated stations
	help                             : show this
EOF
}

## Global Setting

wifi_2g=wifi1
wifi_5g=wifi0

ifname_2g_master=ath1
ifname_2g_guest=ath11

ifname_5g_master=ath0
ifname_5g_guest=ath01
## GS END

# $1 - Physical interface
# $2 - Indicator string
dni_statistic_qcawifi()
{
	[ -z $1 ] && return
	# enable WLAN statistic
	/usr/sbin/iwpriv "$1" enable_ol_stats 1

	ifconfig $1 > /dev/null 2>&1
	if [ "$?" = "0" ]; then
		tx_packets=`athstats -i $1 | grep 'ast_tx_packets' | cut -f 2`
		rx_packets=`athstats -i $1 | grep 'ast_rx_packets' | cut -f 2`
		collisions=0
		tx_bytes=`athstats -i $1 | grep 'ast_tx_bytes' | cut -f 2`
		rx_bytes=`athstats -i $1 | grep 'ast_rx_bytes' | cut -f 2`

		echo "$2"

		echo "TX packets:$tx_packets"
		echo "RX packets:$rx_packets"
		echo "collisons:$collisions"
		echo "TX bytes:$tx_bytes"
		echo "RX bytes:$rx_bytes"
		echo ""
	fi
}


dni_wifi_statistic()
{
	dni_statistic_qcawifi $wifi_2g "###2.4G###"
	dni_statistic_qcawifi $wifi_5g "###5G###"
}

# $1 - VAP ifname
# $2 - Option
dni_radio_qcawifi()
{
	[ -z $1 ] && return
	local ifname=$1

	shift
	while [ "$#" -gt "0" ]; do
		case $1 in
			-s|--status)
				isup=`ifconfig $ifname | grep UP`
				[ -n "$isup" ] && echo "ON" || echo "OFF"
				shift
				;;
			-c|--channel)
				isap=`iwconfig $ifname | grep Master`
				[ -z "$isap" ] && shift && continue

				p_chan=`iwlist $ifname chan | grep Current | awk '{printf "%d\n", substr($5,1,length($5))}'`
				cur_mode=`iwpriv $ifname g_dni_curmode | cut -d: -f2`
				is_20=`echo $cur_mode | grep '20'`
				is_plus=`echo $cur_mode | grep 'PLUS'`
				is_minus=`echo $cur_mode | grep 'MINUS'`
				is_80=`echo $cur_mode | grep '80'`

				# when enable wla_ht160, need change mode to HT160 for EU and HT80_80 for NA.
				# EU use channel "36+40+44+48+52+56+60+64" or "100+104+108+112+116+120+124+128"
				# NA use channel "36+40+44+48+149+153+157+161"
				is_80_80=`echo $cur_mode | grep '80_80'`
				is_160=`echo $cur_mode | grep '160'`

				if [ -n "$is_20" ]; then
					chan=$p_chan
				elif [ -n "$is_plus" ]; then
					s_chan=$(($p_chan + 4));
					chan="${p_chan}(p) + ${s_chan}(s)"
				elif [ -n "$is_minus" ]; then
					s_chan=$(($p_chan - 4));
					chan="${p_chan}(p) + ${s_chan}(s)"
				elif [ -z "$is_80_80" -a -n "$is_80" ]; then
					case "${p_chan}" in
						36) chan="36(p) + 40 + 44 + 48" ;;
						40) chan="36 + 40(p) + 44 + 48" ;;
						44) chan="36 + 40 + 44(p) + 48" ;;
						48) chan="36 + 40 + 44 + 48(p)" ;;
						52) chan="52(p) + 56 + 60 + 64" ;;
						56) chan="52 + 56(p) + 60 + 64" ;;
						60) chan="52 + 56 + 60(p) + 64" ;;
						64) chan="52 + 56 + 60 + 64(p)" ;;
						100) chan="100(p) + 104 + 108 + 112" ;;
						104) chan="100 + 104(p) + 108 + 112" ;;
						108) chan="100 + 104 + 108(p) + 112" ;;
						112) chan="100 + 104 + 108 + 112(p)" ;;
						116) chan="116(p) + 120 + 124 + 128" ;;
						120) chan="116 + 120(p) + 124 + 128" ;;
						124) chan="116 + 120 + 124(p) + 128" ;;
						128) chan="116 + 120 + 124 + 128(p)" ;;
						132) chan="132(p) + 136 + 140 + 144" ;;
						136) chan="132 + 136(p) + 140 + 144" ;;
						140) chan="132 + 136 + 140(p) + 144" ;;
						144) chan="132 + 136 + 140 + 144(p)" ;;
						149) chan="149(p) + 153 + 157 + 161";;
						153) chan="149 + 153(p) + 157 + 161";;
						157) chan="149 + 153 + 157(p) + 161";;
						161) chan="149 + 153 + 157 + 161(p)";;
					esac
				elif [ -n "$is_80_80" ]; then
					case "${p_chan}" in
						36) chan="36(p) + 40 + 44 + 48 + 149 + 153 + 157 + 161" ;;
						40) chan="36 + 40(p) + 44 + 48 + 149 + 153 + 157 + 161" ;;
						44) chan="36 + 40 + 44(p) + 48 + 149 + 153 + 157 + 161" ;;
						48) chan="36 + 40 + 44 + 48(p) + 149 + 153 + 157 + 161" ;;
						132) chan="132(p) + 136 + 140 + 144 + 149 + 153 + 157 + 161" ;;
						136) chan="132 + 136(p) + 140 + 144 + 149 + 153 + 157 + 161" ;;
						140) chan="132 + 136 + 140(p) + 144 + 149 + 153 + 157 + 161" ;;
						144) chan="132 + 136 + 140 + 144(p) + 149 + 153 + 157 + 161" ;;
						149) chan="36 + 40 + 44 + 48 + 149(p) + 153 + 157 + 161";;
						153) chan="36 + 40 + 44 + 48 + 149 + 153(p) + 157 + 161";;
						157) chan="36 + 40 + 44 + 48 + 149 + 153 + 157(p) + 161";;
						161) chan="36 + 40 + 44 + 48 + 149 + 153 + 157 + 161(p)";;
					esac
				elif [ -n "$is_160" ]; then
					case "${p_chan}" in
						36) chan="36(p) + 40 + 44 + 48 + 52 + 56 + 60 + 64" ;;
						40) chan="36 + 40(p) + 44 + 48 + 52 + 56 + 60 + 64" ;;
						44) chan="36 + 40 + 44(p) + 48 + 52 + 56 + 60 + 64" ;;
						48) chan="36 + 40 + 44 + 48(p) + 52 + 56 + 60 + 64" ;;
						52) chan="36 + 40 + 44 + 48 + 52(p) + 56 + 60 + 64" ;;
						56) chan="36 + 40 + 44 + 48 + 52 + 56(p) + 60 + 64" ;;
						60) chan="36 + 40 + 44 + 48 + 52 + 56 + 60(p) + 64" ;;
						64) chan="36 + 40 + 44 + 48 + 52 + 56 + 60 + 64(p)" ;;
						100) chan="100(p) + 104 + 108 + 112 + 116 + 120 + 124 + 128" ;;
						104) chan="100 + 104(p) + 108 + 112 + 116 + 120 + 124 + 128" ;;
						108) chan="100 + 104 + 108(p) + 112 + 116 + 120 + 124 + 128" ;;
						112) chan="100 + 104 + 108 + 112(p) + 116 + 120 + 124 + 128" ;;
						116) chan="100 + 104 + 108 + 112 + 116(p) + 120 + 124 + 128" ;;
						120) chan="100 + 104 + 108 + 112 + 116 + 120(p) + 124 + 128" ;;
						124) chan="100 + 104 + 108 + 112 + 116 + 120 + 124(p) + 128" ;;
						128) chan="100 + 104 + 108 + 112 + 116 + 120 + 124 + 128(p)" ;;
					esac
				else
					chan=$p_chan
				fi
				echo "$chan"
				shift
				;;
			*)
				shift
				;;
		esac
	done
}

dni_wifi_radio()
{
	local band=$2
	case $band in
		11g)
			dni_radio_qcawifi $ifname_2g_master $@
			;;
		11a)
			dni_radio_qcawifi $ifname_5g_master $@
			;;
		*)
			;;
	esac
}

get_vap_schedule_state(){
    _prefix=$1
    if [ "$(config get ${_prefix}_onoff_sched)" = "0" ] || [ "$(config get ${_prefix}_onoff_sched)" = "" ]; then
        echo 0
    else
        echo 1
    fi
}

dni_wifi_stainfo()
{
    interface=

    [ "$(config get endis_wl_radio)" = "1" -a "$(get_vap_schedule_state wlg)" = "0" ] && interface="ath1"
    [ "$(config get endis_wla_radio)" = "1" -a "$(get_vap_schedule_state wla)" = "0" ] && interface="$interface ath0"
    [ "$(config get wlg1_endis_guestNet)" = "1" -a "$(get_vap_schedule_state wlg)" = "0" ] && interface="$interface ath11"
    [ "$(config get wla1_endis_guestNet)" = "1" -a "$(get_vap_schedule_state wla)" = "0" ] && interface="$interface ath01"
    [ "$interface" = "" -o "$(config get wl_hw_btn_state)" = "off" ] && return
    

    tmpfile=/tmp/sta_info.$$

    for ifname in $interface; do

        wlanconfig "$ifname" list sta >> $tmpfile
        case "$ifname" in
            ath0)
                echo "###5G###"
                ;;
            ath01)
                echo "###5G Guest###"
                ;;
            ath1)
                echo "###2.4G###"
                ;;
            ath11)
                echo "###2.4G Guest###"
                ;;
        esac
        awk '$1 !~ /ADDR/ {printf "%s\t%sbps\t%s\n", $1, $4, $6}'  $tmpfile
        echo ""
        rm -f $tmpfile
    done
}


case "$1" in
	statistic)
		dni_wifi_statistic
		;;
	stainfo)
		dni_wifi_stainfo "$@"
		;;
	radio)
		dni_wifi_radio "$@"
		;;
	*)
		show_usage
		;;
esac




