#!/bin/sh

https_url="https://http.fw.updates1.netgear.com/sw-apps/ready-genie-cloud/r7800"
ftp_url="ftp://updates1.netgear.com/sw-apps/ready-genie-cloud/r7800"
version=`cat /cloud_version`
cloud_url=http://www.voxel-firmware.com/Downloads/Voxel/R7800-Voxel-firmware/ReadyCLOUD/readygeniecloud-r7800new2-20180619-01.tar.gz
config=/bin/config
sleep_time_1=60
sleep_time_2=300
sleep_time_3=600
sleep_time_4=1800
sleep_time_5=3600

dynamic_sleep() {
	if [ $retry_count -lt 5 ]; then
		let retry_count=$retry_count+1
	fi
	eval sleep_time=\$sleep_time_$retry_count
	sleep $sleep_time
}

start() {
	[ -d /opt ] && {
		/opt/xagent/run-xagent.sh
		/www/cgi-bin/readycloud_control.cgi
		sleep 2
		readycloud_enable=$(/bin/config get readycloud_enable)
		if [ "$readycloud_enable" = "1" ]; then
			readycloud_user_admin="$(/bin/config get readycloud_user_admin)"
			readycloud_user_passsword="$(/bin/config get readycloud_user_password)"
			/opt/rcagent/scripts/register.sh $readycloud_user_admin $readycloud_user_passsword
		fi
	}
}

uninstall() {
	[ -s /opt/filelist ] && cat /opt/filelist | xargs /bin/rm -f
	if [ -f /opt/dirlist ]; then
		/bin/mv -f /opt/dirlist /tmp/cloud_dirlist
		while read line; do
			/bin/rmdir $line
		done < /tmp/cloud_dirlist
		if [ -d /opt ]; then
			/bin/rmdir /opt
		fi
	fi
	/bin/rm -f /tmp/cloud_dirlist
	/bin/rm -f /tmp/.cloud_updated
}

checkversion() {
	[ -d /opt ] || return 1
	[ "x$(grep $version /opt/version)" = "x" ] && uninstall
}

backup() {
	[ -s /overlay/opt/filelist ] || return 1
	while read file; do
		target="/tmp/clouddir$(dirname $file)"
		/bin/mkdir -p $target
		/bin/cp -f $file $target
	done < /overlay/opt/filelist
}

restore() {
	[ -d /tmp/clouddir ] || return 1
	/bin/cp -fpR /tmp/clouddir/overlay/* /overlay
	/bin/rm -rf /tmp/clouddir
}

install_local() {
        [ -f /opt/version ] && return 1
	/usr/bin/wget --no-check-certificate -T 10 $cloud_url -O /tmp/readygeniecloud-r7800new2-20180619-01.tar.gz
	/bin/mkdir /tmp/clouddir
	tar xzf /tmp/readygeniecloud-r7800new2-20180619-01.tar.gz -C /tmp/clouddir
	echo readygeniecloud-r7800new2-20180619-01.tar.gz > /tmp/clouddir/opt/version
	touch /tmp/clouddir/opt/filelist
	find /tmp/clouddir -type f | sed 's/\/tmp\/clouddir/\/overlay/' > /tmp/clouddir/opt/filelist
	find /tmp/clouddir/opt -type d | sed 's/\/tmp\/clouddir/\/overlay/' | sort -r > /tmp/clouddir/opt/dirlist
	/bin/cp -fpR /tmp/clouddir/* /
	/bin/rm -f /tmp/cloud_info
	/bin/rm -f /tmp/cloud.tar.gz
	/bin/rm -rf /tmp/clouddir
	sed '2s/^/source \/etc\/profile\n/' /opt/rcagent/run_server.sh > /tmp/run_server.sh
	/bin/cp /tmp/run_server.sh /opt/rcagent/run_server.sh

	start
}

update() {
	# Check if cloud is disabled
	if [ -f /.nocloud ]; then
		exit 0
	fi

	nocloud=$($config get nocloud)
	if [ "$nocloud" = "1" ]; then
		exit 0
	fi

	local cloud_binary_install=$(/bin/config get cloud_binary_install)
	[ -f /tmp/.cloud_updated ] && return 1
	PID_file=/var/run/cloud.pid
	[ -f $PID_file ] && return 1
	install_local
	echo "$$" > $PID_file
	retry_count=0
	while [ 1 ]; do
		echo "start to get info from $https_url"
		curl -L -k $https_url/ 2>/dev/null | grep readygeniecloud-r7800new2-*-.*.tar.gz > /tmp/cloud_info
		url_way="https"
		[ -s /tmp/cloud_info ] && break
		echo "cannot $https_url/ or don't find readygeniecloud tarball with version $version"

		echo "start to get info from $ftp_url"
		curl $ftp_url/ 2>/dev/null | grep readygeniecloud-r7800new2-*-.*.tar.gz > /tmp/cloud_info
		url_way="ftp"
		[ -s /tmp/cloud_info ] && break
		echo "cannot access $ftp_url/ or don't find readygeniecloud tarball with version $version"
		dynamic_sleep
	done
	if [ "$url_way" == "ftp" ];then
		fullversion=`tail -1 /tmp/cloud_info | awk '{print $9}'`
		if [ -f /opt/version -a "x$(cat /opt/version)" = "x$fullversion" ]; then
			/bin/rm -f /tmp/cloud_info
			touch /tmp/.cloud_updated
			/bin/rm -f $PID_file
			echo "the readygeniecloud on update server is same as on R/W filesystem"
			start
			return 1
		fi
		size=`tail -1 /tmp/cloud_info | awk '{print $5}'`
	else
		sed -i "s/\/A/\\n/g" /tmp/cloud_info
		sed -i "s/<//g" /tmp/cloud_info
		fullversion=`cat /tmp/cloud_info |grep readygeniecloud-r7800new2 |awk -F '>' '{print $NF}' |tail -1`
		if [ -f /opt/version -a "x$(cat /opt/version)" = "x$fullversion" ]; then
			/bin/rm -f /tmp/cloud_info
			touch /tmp/.cloud_updated
			/bin/rm -f $PID_file
			echo "the readygeniecloud on update server is same as on R/W filesystem"
			start
			return 1
		fi
		size=`cat /tmp/cloud_info |grep $fullversion |awk '{print $4}'`
	fi
	echo "start to download sw-apps/ready-genie-cloud/r7800/$fullversion"
	retry_count=0
	while [ 1 ]; do
		curl -L -k $https_url/$fullversion -o /tmp/cloud.tar.gz 2>/dev/null
		[ "$(wc -c /tmp/cloud.tar.gz | awk '{print $1}')" = "$size" ] && break
		echo "fail to download readygeniecloud-r7800-$fullversion"

		curl $ftp_url/$fullversion -o /tmp/cloud.tar.gz 2>/dev/null
		[ "$(wc -c /tmp/cloud.tar.gz | awk '{print $1}')" = "$size" ] && break
		echo "fail to download $ftp_url/readygeniecloud-r7800-$fullversion"
		dynamic_sleep
	done
	uninstall
	/bin/mkdir /tmp/clouddir
	tar xzf /tmp/cloud.tar.gz -C /tmp/clouddir
	echo $fullversion > /tmp/clouddir/opt/version
	touch /tmp/clouddir/opt/filelist
	find /tmp/clouddir -type f | sed 's/\/tmp\/clouddir/\/overlay/' > /tmp/clouddir/opt/filelist
	find /tmp/clouddir/opt -type d | sed 's/\/tmp\/clouddir/\/overlay/' | sort -r > /tmp/clouddir/opt/dirlist
	/bin/cp -fpR /tmp/clouddir/* /
	/bin/rm -f /tmp/cloud_info
	/bin/rm -f /tmp/cloud.tar.gz
	/bin/rm -rf /tmp/clouddir
	touch /tmp/.cloud_updated
	# add newline "source /etc/profile" in file /opt/rcagent/run_server.sh
	sed '2s/^/source \/etc\/profile\n/' /opt/rcagent/run_server.sh > /tmp/run_server.sh
	/bin/cp /tmp/run_server.sh /opt/rcagent/run_server.sh

	echo $fullversion | cut -d - -f 3 > /cloud_version
	echo "install ftp://updates1.netgear.com/sw-apps/ready-genie-cloud/r7800/$fullversion to R/W filesystem successfully"
	start
	/bin/rm -f $PID_file
}

case "$1" in
	start)
	start
	;;
	backup)
	backup
	;;
	restore)
	restore
	;;
	checkversion)
	checkversion
	;;
	update)
	update
	;;
	uninstall)
	uninstall
	;;
esac
